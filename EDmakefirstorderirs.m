function [irdirect,irgeom,irdiff,timingdata,EDinputdatahash] = EDmakefirstorderirs(firstorderpathdata,...
    fs,Rstart,difforder,envdata,Sinputdata,receivers,edgedata,EDversionnumber,showtext)
% EDmakefirstorderirs calculates the direct sound, specular reflection, and
% first-order diffraction impulse responses.
%
% Input parameters:
%   firstorderpathdata      Struct generated by EDfindconvexGApaths
%   fs                      Sampling frequency
%   Rstart                  The reference for time zero, in meters
%   difforder               Diffraction order
%   envdata                 Input struct; field .cair is used here
%   Sinputdata                 Struct with the fields
%   .coordinates            [nsources,3]
%   .doaddsources           [nsources,1]: 0 or 1
%   .sourceamplitudes       [nsources,1]: multiplication factor
%   receivers               Matrix, [nreceivers,3]
%   edgedata                Struct generated by EDfindedgedata
%   EDversionnumber         
%   showtext                (optional)
% 
% Output parameters:
%   irdirect,irgeom,irdiff  Matrices, size [nirlength,nreceivers,nsources]
%                           (if doaddsources = 0) or [nirlength,nreceivers]
%                           (if doaddsources = 1)
%   timingdata              Vector, [1,3], containing times for the direct
%                           sound, spec. reflections, and first-order diffraction
%                           component generations
%   EDinputdatahash
%   
% Uses functions EDcoordtrans2, EDwedge1st_fd from EDtoolbox
% Uses function DataHash from Matlab Central
% 
% Peter Svensson 28 Feb. 2018 (peter.svensson@ntnu.no)
%
% [irdirect,irgeom,irdiff,timingdata,EDinputdatahash] = EDmakefirstorderirs(firstorderpathdata,...
%     fs,Rstart,difforder,envdata,Sinputdata,receivers,edgedata,EDversionnumber,showtext)

% 12 Jan. 2018 First complete version. Much simplified version of the
%                           previous ESIE2maketfs. Edgehits not handled
%                           yet.
% 15 Jan. 2018 Took the direct sound and spec refl amplitude 
%              (1, 0.5, 0.25) into account)
% 17 Jan. 2018 Had forgotten the Rstart factor for the direct sound and
% specular reflection.
% 17 Jan. 2018 Took the input parameter difforder into account
% 17 Jan 2018 Added showtext as input parameter. Fixed a bug which gave the
% wrong specular reflection amplitude.
% 18 Jan 2018 Changed input parameter to the Sindata struct, to also get
% the .sourceamplitudes field. Implemented the sourceamplitudes scale
% factor.
% 28 Jan 2018 First version; modified from EDmakefirstordertfs
% 28 Feb 2018 Introducing into the EDtoolbox master

if nargin < 10
   showtext = 0; 
end

EDinputdatastruct = struct('firstorderpathdata',firstorderpathdata,'edgedata',edgedata,...
    'fs',fs,'Rstart',Rstart,'difforder',difforder,...
    'envdata',envdata,'Sinputdata',Sinputdata,...
    'receivers',receivers,'EDversionnumber',EDversionnumber);
EDinputdatahash = DataHash(EDinputdatastruct);

timingdata = zeros(1,3);

nreceivers = size(receivers,1);
nsources = size(Sinputdata.coordinates,1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Specular reflections

if showtext >= 2
   disp(['      Generating specular reflection components']) 
end

t00 = clock;

if firstorderpathdata.ncomponents(2) > 0

    ncomponents = size(firstorderpathdata.specrefllist(:,1),1);

    distvecs = firstorderpathdata.specreflIScoords - ...
        receivers(firstorderpathdata.specrefllist(:,2),:);

    if ncomponents == 1
       alldists = norm(distvecs);
    else
        alldists = sqrt( sum(distvecs.^2,2) );
    end

    allslotnumberfracs = (alldists-Rstart)/envdata.cair*fs+1;
    allamps = 1./alldists.*firstorderpathdata.specrefllist(:,3).*...
        Sinputdata.sourceamplitudes( firstorderpathdata.specrefllist(:,1) );
    allslotnumbers = floor(allslotnumberfracs);
    if any(allslotnumbers<1)
        error('ERROR: Rstart is set to too low a value!')
    end
    allslotnumberfracs = allslotnumberfracs - allslotnumbers;
    nirlength = max(allslotnumbers + 2);
    
    if Sinputdata.doaddsources == 1
        irgeom = zeros(nirlength,nreceivers);
    else
        irgeom = zeros(nirlength,nreceivers,nsources);
    end
    
    for ii = 1:ncomponents
        if Sinputdata.doaddsources == 0
            irgeom(allslotnumbers(ii),firstorderpathdata.specrefllist(ii,2),...
                firstorderpathdata.specrefllist(ii,1)) = ...
                  irgeom(allslotnumbers(ii),firstorderpathdata.specrefllist(ii,2),...
                  firstorderpathdata.specrefllist(ii,1)) + allamps(ii)*(1-allslotnumberfracs(ii));
            irgeom(allslotnumbers(ii)+1,firstorderpathdata.specrefllist(ii,2),...
                firstorderpathdata.specrefllist(ii,1)) = ...
                  irgeom(allslotnumbers(ii)+1,firstorderpathdata.specrefllist(ii,2),...
                  firstorderpathdata.specrefllist(ii,1)) + allamps(ii)*(allslotnumberfracs(ii));            
        else
           irgeom(allslotnumbers(ii),firstorderpathdata.specrefllist(ii,2)) = ...
                  irgeom(allslotnumbers(ii),firstorderpathdata.specrefllist(ii,2))...
                   + allamps(ii)*(1-allslotnumberfracs(ii));
            irgeom(allslotnumbers(ii)+1,firstorderpathdata.specrefllist(ii,2)) = ...
                  irgeom(allslotnumbers(ii)+1,firstorderpathdata.specrefllist(ii,2))...
                   + allamps(ii)*(allslotnumberfracs(ii));            
        end
        
    end
  
else
    nirlength = 2;
    if Sinputdata.doaddsources == 1
        irgeom = zeros(nirlength,nreceivers);
    else
        irgeom = zeros(nirlength,nreceivers,nsources);
    end    
end

timingdata(2) = etime(clock,t00);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Direct sound

if showtext >= 2
   disp(['      Generating direct sound components']) 
end
t00 = clock;

% alldists, allslotnumberfracs, allamps. allslotnumbers will be matrices 
% of size [nreceivers,nsources]

if firstorderpathdata.ncomponents(1) > 0
    ncomponents = size(firstorderpathdata.directsoundlist(:,1),1);

    distvecs = Sinputdata.coordinates(firstorderpathdata.directsoundlist(:,1),:) - ...
        receivers(firstorderpathdata.directsoundlist(:,2),:);

    if ncomponents == 1
       alldists = norm(distvecs);
    else
        alldists = sqrt( sum(distvecs.^2,2) ); 
    end
    
    allslotnumberfracs = (alldists-Rstart)/envdata.cair*fs+1;
    allamps = 1./alldists.*firstorderpathdata.directsoundlist(:,3).*...
        Sinputdata.sourceamplitudes( firstorderpathdata.directsoundlist(:,1) );
    allslotnumbers = floor(allslotnumberfracs);
    if any(allslotnumbers<1)
        error('ERROR: Rstart is set to too low a value!')
    end
    allslotnumberfracs = allslotnumberfracs - allslotnumbers;
    nirlengthdirect = max(allslotnumbers + 2);
    
    if nirlengthdirect > nirlength
        if Sinputdata.doaddsources == 1
            irgeom = [irgeom;zeros(nirlengthdirect-nirlength,nreceivers)];
        else
            irgeom = [irgeom;zeros(nirlengthdirect-nirlength,nreceivers,nsources)];
        end    
        nirlength = nirlengthdirect;
    end
    
    if Sinputdata.doaddsources == 1
        irdirect = zeros(nirlength,nreceivers);
    else
        irdirect = zeros(nirlength,nreceivers,nsources);
    end
	    
    for ii = 1:ncomponents
        if Sinputdata.doaddsources == 0
            irdirect(allslotnumbers(ii),firstorderpathdata.directsoundlist(ii,2),...
                firstorderpathdata.directsoundlist(ii,1)) = ...
                  irdirect(allslotnumbers(ii),firstorderpathdata.directsoundlist(ii,2),...
                  firstorderpathdata.directsoundlist(ii,1)) + allamps(ii)*(1-allslotnumberfracs(ii));
            irdirect(allslotnumbers(ii)+1,firstorderpathdata.directsoundlist(ii,2),...
                firstorderpathdata.directsoundlist(ii,1)) = ...
                  irdirect(allslotnumbers(ii)+1,firstorderpathdata.directsoundlist(ii,2),...
                  firstorderpathdata.directsoundlist(ii,1)) + allamps(ii)*(allslotnumberfracs(ii));            
        else
           irdirect(allslotnumbers(ii),firstorderpathdata.directsoundlist(ii,2)) = ...
                  irdirect(allslotnumbers(ii),firstorderpathdata.directsoundlist(ii,2))...
                   + allamps(ii)*(1-allslotnumberfracs(ii));
            irdirect(allslotnumbers(ii)+1,firstorderpathdata.directsoundlist(ii,2)) = ...
                  irdirect(allslotnumbers(ii)+1,firstorderpathdata.directsoundlist(ii,2))...
                   + allamps(ii)*(allslotnumberfracs(ii));            
        end
        
    end

else
    if Sinputdata.doaddsources == 1
        irdirect = zeros(nirlength,nreceivers);
    else
        irdirect = zeros(nirlength,nreceivers,nsources);
    end  
end

timingdata(1) = etime(clock,t00);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Diffraction

t00 = clock;

if difforder > 0

    if showtext >= 2
        disp(['      Generating first-order diffraction components']) 
    end
    
    if Sinputdata.doaddsources == 1
        irdiff = zeros(nirlength,nreceivers);
    else
        irdiff = zeros(nirlength,nreceivers,nsources);
    end

    iv = find(firstorderpathdata.edgeisactive);

    sou_vs_edges = sign(squeeze(sum(firstorderpathdata.diffpaths,1)));
    if size(sou_vs_edges,2) == 1
        sou_vs_edges = sou_vs_edges.';
    end
    rec_vs_edges = sign(squeeze(sum(firstorderpathdata.diffpaths,2)));
    if size(rec_vs_edges,2) == 1
        rec_vs_edges = rec_vs_edges.';
    end

    for ii = 1:length(iv)
        cylcoordS = zeros(nsources,3);
        cylcoordR = zeros(nreceivers,3);

        edgenumber = iv(ii);
        edgecoords = [edgedata.edgestartcoords(edgenumber,:);edgedata.edgeendcoords(edgenumber,:)];

        sourceandreceivercombos = squeeze(firstorderpathdata.diffpaths(:,:,edgenumber));
        iv2 = find(sourceandreceivercombos);
        [Rnumber,Snumber] = ind2sub([nreceivers,nsources],iv2);

        ivS = find(sou_vs_edges(:,edgenumber));
        ivR = find(rec_vs_edges(:,edgenumber));
        [rs,thetas,zs,rr,thetar,zr] = EDcoordtrans2(Sinputdata.coordinates(ivS,:),receivers(ivR,:),edgecoords,edgedata.edgenvecs(edgenumber,:));

        cylcoordS(ivS,:) = [rs thetas zs];
        cylcoordR(ivR,:) = [rr thetar zr];

        for jj = 1:length(iv2)
%             [tfnew,singularterm] = EDwedge1st_fd(envdata.cair,controlparameters.frequencies,edgedata.closwedangvec(edgenumber),...
%                 cylcoordS(Snumber(jj),1),cylcoordS(Snumber(jj),2),cylcoordS(Snumber(jj),3),...
%                 cylcoordR(Rnumber(jj),1),cylcoordR(Rnumber(jj),2),cylcoordR(Rnumber(jj),3),...
%                 edgedata.edgelengthvec(edgenumber)*[0 1],'n',Rstart,[1 1]);  
            [irnew,singularterm] = EDwedge1st_ir(fs,envdata.cair,edgedata.closwedangvec(edgenumber),...
                cylcoordS(Snumber(jj),1),cylcoordS(Snumber(jj),2),cylcoordS(Snumber(jj),3),...
                cylcoordR(Rnumber(jj),1),cylcoordR(Rnumber(jj),2),cylcoordR(Rnumber(jj),3),...
                edgedata.edgelengthvec(edgenumber)*[0 1],'n',Rstart,[1 1]);  

            irnew = irnew.*Sinputdata.sourceamplitudes( Snumber(jj) );
            nirlengthnew = length(irnew);
            
            if nirlengthnew > nirlength
                if Sinputdata.doaddsources == 1
                    irgeom   = [irgeom;  zeros(nirlengthnew-nirlength,nreceivers)];
                    irdirect = [irdirect;zeros(nirlengthnew-nirlength,nreceivers)];
                    irdiff = [irdiff;zeros(nirlengthnew-nirlength,nreceivers)];                    
                else
                    irgeom   = [irgeom;  zeros(nirlengthnew-nirlength,nreceivers,nsources)];
                    irdirect = [irdirect;zeros(nirlengthnew-nirlength,nreceivers,nsources)];
                    irdiff = [irdiff;zeros(nirlengthnew-nirlength,nreceivers,nsources)];
                end    
                nirlength = nirlengthnew;                
            end    
                
            if Sinputdata.doaddsources == 1
                irdiff(1:nirlengthnew,Rnumber(jj)) =  irdiff(1:nirlengthnew,Rnumber(jj)) + irnew;                       
            else
%                 size(irnew)
%                 size(irdiff)
                irdiff(1:nirlengthnew,Rnumber(jj),Snumber(jj)) =  irdiff(1:nirlengthnew,Rnumber(jj),Snumber(jj)) + irnew;           
            end
        end

    end
else
   irdiff = zeros(size(irgeom));
end

timingdata(3) = etime(clock,t00);
    
    


